;; -*- mode: scheme -*-

;; Build site according to configuration file

(use srfi-1)
(use srfi-13)
(use util.match)
(use util.list)
(use file.util)
(use file.filter)

(define (main args)
  (match (cdr args)
    [(config) (do-build (load-config config))]
    [_ (exit 1 "Usage: gosh build-site <config-file>")])
  0)

(define (do-build config)
  (let* ([room-name  (assoc-ref config 'room-name)]
         [safe-room-name (string-downcase (string-filter room-name #[\w-]))]
         [docdir  (assoc-ref config 'server-htdocs-dir)]
         [datadir (assoc-ref config 'server-data-dir)]
         [bindir  (assoc-ref config 'server-bin-dir)]
         [cgi-script #`"chaton-poster-,|safe-room-name|"]
         [comet-script #`"chaton-viewer-,|safe-room-name|"]
         [archiver-script #`"chaton-archiver-,|safe-room-name|"]
         [timestamp (number->string (sys-time) 36)]
         [chaton-js #`"chaton.,|timestamp|.js"])
    ;; ensure target directories
    (for-each make-directory* (list bindir
                                    (build-path bindir "data")
                                    (build-path bindir "logs")
                                    (build-path docdir "var")))
    ;; ensure initial files existence
    (create-if-does-not-exist (build-path bindir "data/current.dat") "")
    (create-if-does-not-exist (build-path docdir "var/seq") "0")
    ;; clean old timestamped files
    (remove-files (directory-list docdir
                                  :add-path? #t :filter #/^chaton\.\w+\.js$/))
    ;; copy files
    (let1 nconf (list* `(comet-script . ,comet-script)
                       `(cgi-script . ,cgi-script)
                       `(chaton-js . ,chaton-js)
                       `(version . ,timestamp)
                       config)
      (sed "chaton-viewer" (build-path bindir comet-script) nconf #o555)
      (sed "chaton-archiver" (build-path bindir archiver-script) nconf #o555)
      (sed "chaton.scm"    (build-path datadir "chaton.scm") nconf #o444)
      (sed "chaton-poster" (build-path docdir cgi-script) nconf #o555)
      (sed "chaton-browser"(build-path docdir "a") nconf #o555)
      (sed "chaton.html"   (build-path docdir "chaton.html") nconf #o444)
      (sed "chaton.js"     (build-path docdir chaton-js) nconf #o444)
      (sed "htaccess"      (build-path docdir ".htaccess") nconf #o444)
      (sed "chaton.css"    (build-path docdir "chaton.css") nconf #o444))))

(define (sed inf outf config mode)
  (define (xlate line)
    (apply regexp-replace-all* line
           #/#!\/usr\/bin\/env gosh/ #`"#!,(assoc-ref config 'gosh)"
           (concatenate (map (lambda (cv) `(,#`"@@,(car cv)@@" ,(cdr cv)))
                             config))))
  (print "installing " outf)
  (file-filter (lambda (in out)
                 (port-for-each (lambda (line) (format out "~a\n" (xlate line)))
                                (cut read-line in)))
               :input inf :output outf :temporary-file #`",|outf|.t")
  (sys-chmod outf mode))

(define (create-if-does-not-exist file content)
  (with-output-to-file file
    (lambda () (display content))
    :if-exists #f))

;; This returns ((<var> . <val>) ...) of config file, in the REVERSE order
;; of apperance.  The order is important to allow overriding values by
;; the succeeding definitions (e.g. overriding site-specific parameter
;; with room-specific parameter).
(define (load-config file)
  (define (do-load file seed)
    (with-input-from-file file
      (lambda ()
        (port-fold (lambda (s seed)
                     (match s
                       [('include path)
                        (do-load (if (absolute-path? path)
                                   path
                                   (build-path (sys-dirname file) path))
                                 seed)]
                       [(var val) (acons var val seed)]))
                   seed
                   read))))
  (do-load file '()))
