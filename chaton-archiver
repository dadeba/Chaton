#!/usr/bin/env gosh
;; This script should be run periodically to truncate and
;; save the logs.

(define-module chaton.archiver
  (use file.util)
  (use file.filter)
  (use util.match)
  (use gauche.fcntl)
  (use gauche.parameter)
  (use gauche.parseopt)
  (use srfi-19)
  (export run-archiver))
(select-module chaton.archiver)

(define *datadir* "@@server-data-dir@@data")

(define verbose (make-parameter #f))
(define notrunc (make-parameter #f)) ; suppress truncating current.dat

(define (report fmt . args)
  (when (verbose) (apply format #t fmt args)))

(define (split-data in out start end pred)
  (file-filter (lambda (in out)
                 (port-for-each (cut filter-entry <> out start end pred)
                                (cut read-line in)))
               :input in :output out :temporary-file #`",|out|.t"))

(define (filter-entry line out start end pred)
  (match (safe-read line)
    [(nick (sec usec) text . _)
     (when (pred (<= start sec end)) (display line out) (newline out))]
    [_ #f]))

(define (split-data-by-day in out date pred)
  (let1 start (time-second (date->time-utc date))
    (split-data in out start (+ start 86399) pred)))

(define (daily-log-path date)
  (build-path *datadir* (format "~4,'0d/~2,'0d/~2,'0d.dat"
                                (date-year date)
                                (date-month date)
                                (date-day date))))

(define (safe-read line)
  (guard (e [(<read-error> e) ""]) (read-from-string line)))

;; Chore for the day
;; (1) move the DATE's log into *datadir*/YYYY/MM/DD.dat
;; (2) create a link of *datadir*/YYYY/MM/NEXTDAY.dat -> ../../current.dat
;;     and *datadir*/YYYY/MM/NEXTNEXTDAY.dat -> ../../current.dat
;; (3) truncate *datadir*/current.dat
(define (chore-for-the-day date)
  (let* ([current  (build-path *datadir* "current.dat")]
         [backup   (build-path *datadir* "current.dat.bak")]
         [today    (daily-log-path date)]
         [today+1  (daily-log-path (date+ date 1))]
         [today+2  (daily-log-path (date+ date 2))])
    (call-with-output-file current
      (lambda (out)
        (unwind-protect
            (begin
              (sys-fcntl out F_SETLKW (make <sys-flock> :type F_WRLCK))
              (unless (notrunc)
                (copy-file current backup :if-exists :supersede)) ; backup
              (make-directory* (sys-dirname today))
              (make-directory* (sys-dirname today+1))
              (make-directory* (sys-dirname today+2))
              (cond [(and (file-exists? today)
                          (not (file-is-symlink? today)))
                     (report "archive file ~a exists.  skipping.\n" today)]
                    [else
                     (report "generating ~a\n" today)
                     (split-data-by-day current today date identity)
                     (unless (notrunc)
                       (report "truncating ~a\n" current)
                       (split-data-by-day current current date not))])
              (mklink today+1)
              (mklink today+2))
          (sys-fcntl out F_SETLK (make <sys-flock> :type F_UNLCK))))
      :if-exists :append :if-does-not-exist #f)))

(define (beginning date)
  (make-date 0 0 0 0 (date-day date) (date-month date) (date-year date)
             (date-zone-offset date)))

(define (date+ date days)
  (julian-day->date (+ (date->julian-day date) days)))

(define (mklink daily-file)
  (cond [(file-exists? daily-file)
         (report "link ~a exists.  skipping.\n" daily-file)]
        [else
         (report "creating link ~a\n" daily-file)
         (sys-symlink "../../current.dat" daily-file)]))

(define (parse-date str)
  (rxmatch-case str
    [#/^(\d\d\d\d)\/(\d{1,2})\/(\d{1,2})$/ (_ y m d)
     (let ([yy (x->integer y)]
           [mm (x->integer m)]
           [dd (x->integer d)])
       (unless (and (<= 2000 yy)
                    (<= 1 mm 12)
                    (<= 1 dd 31))
         (exit 1 "bad date: ~a" str))
       (make-date 0 0 0 0 dd mm yy (date-zone-offset (current-date))))]
    [else (exit 1 "bad date: ~a" str)]))

(define (run-archiver args)
  (let-args (cdr args) ([q "q|quiet"]
                        [n "n|notrunc"]
                        [else => (lambda (_) (usage))]
                        . args)
    (parameterize ([verbose (not q)]
                   [notrunc n])
      (match args
        [()        (chore-for-the-day (date+ (beginning (current-date)) -1))]
        [(datestr) (chore-for-the-day (parse-date datestr))]))
    0))

(define (usage)
  (exit 1 #`"Usage: ,*program-name* [-q|quiet][-n|notrunc] [date] \
   \nOptions:\
   \n -q, --quiet    Operate quietly.\
   \n -n, --notrunc  Do not truncate current.dat; only creates per-day\
                     archive and links.  current.dat.bak isn't created\
                     neither."))

(select-module user)

;;;===================================================================

(import chaton.archiver)
(define main run-archiver)

;; Local variables:
;; mode: scheme
;; end:
